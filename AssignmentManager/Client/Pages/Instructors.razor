@page "/Instructors"
@using MudBlazor
@using AssignmentManager.Shared;
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http

<MudText Typo="Typo.h2">Instructors</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudTextField @bind-Value="Search"
                      Label="Search"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search"
                      AdornmentColor="Color.Secondary"
                      DebounceInterval="250"
                      OnDebounceIntervalElapsed="()=>ParseQuery(Search)" />
    </MudItem>
    <MudItem xs="4">
        @if (InstructorResources == null)
        {
            <MudAlert>@Error</MudAlert>
        }
        else
        {
            <MudPaper>
                <div class="d-flex flex-column px-4" style="max-height:600px; overflow:scroll;">
                    <MudList Clickable="true">
                        @foreach (var instructor in InstructorResources)
                        {
                            <MudListItem Text="@GetFullName(instructor)" Avatar="@Icons.Material.Filled.Icecream" OnClick="() => { SelectedInstructor = instructor; ShowSubjects = false; }" />
                        }
                    </MudList>
                </div>
            </MudPaper>
        }
    </MudItem>
    @if (SelectedInstructor != null)
    {
        <MudItem xs="8">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h5">@GetFullName(SelectedInstructor)</MudText>
                    <MudText Typo="Typo.body1">e-mail: @SelectedInstructor.Email</MudText>
                    <MudText Typo="Typo.body1">Телефон: @SelectedInstructor.Phone</MudText>
                    <MudText Typo="Typo.body1">Номер ISU: @SelectedInstructor.IsuId</MudText>
                    <br />
                    @if (SelectedInstructor.SubjectIds != null)
                    {
                        <MudText Typo="Typo.body2" Class="m-1">Number of Subjects is @SelectedInstructor.SubjectIds.Count</MudText>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => { ShowSubjects = !ShowSubjects; }">Subjects</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
    @if (ShowSubjects && SelectedInstructor.SubjectIds != null)
    {
        <MudItem xs="8">
            <MudPaper>
                <div class="d-flex flex-column px-4" style="max-height:600px; overflow:scroll;">
                    <MudList Clickable="true">
                        @foreach (var subjectId in SelectedInstructor.SubjectIds)
                        {
                            <MudListItem Text="@GetSubject(subjectId).Result.SubjectName" Avatar="@Icons.Material.Filled.Subject" />
                        }
                    </MudList>
                </div>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {
    string Search { get; set; }
    string Error { get; set; }
    bool ShowSubjects { get; set; } = false;
    InstructorResource[] InstructorResources { get; set; }
    InstructorResource SelectedInstructor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        InstructorResources = await Http.GetFromJsonAsync<InstructorResource[]>("api/instructors");
    }

    string GetFullName(InstructorResource instructor)
    {
        return $"{instructor.FirstName} {instructor.PatronymicName} {instructor.LastName}";
    }

    async Task<SubjectResource> GetSubject(int id)
    {
        return await Http.GetFromJsonAsync<SubjectResource>($"api/subjects/{id}");
    }

    async void ParseQuery(string query)
    {
        int id;
        if (Search.Length == 6 && int.TryParse(query, out id))
        {
            InstructorResources = new InstructorResource[]{
                await Http.GetFromJsonAsync<InstructorResource>($"api/instructors/{id}") };
        }
        else if(Search == "")
        {
            InstructorResources = await Http.GetFromJsonAsync<InstructorResource[]>("api/instructors");
        } else
        {
            InstructorResources = null;
            Error = "No Instructors found";
        }
        StateHasChanged();
    }
}